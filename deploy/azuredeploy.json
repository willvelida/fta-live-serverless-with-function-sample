{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1318.3566",
      "templateHash": "14902267539397817058"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the region of all resources. Defaults to location of resource group"
      }
    },
    "applicationName": {
      "type": "string",
      "defaultValue": "[uniqueString(resourceGroup().id)]",
      "metadata": {
        "description": "Name of the application. Used as a suffix for resources"
      }
    },
    "storageSku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "The SKU for the storage account"
      }
    }
  },
  "variables": {
    "storageAccountName": "[format('fnstor{0}', replace(parameters('applicationName'), '-', ''))]",
    "appInsightsName": "[format('{0}-ai', parameters('applicationName'))]",
    "appServicePlanName": "[format('{0}-asp', parameters('applicationName'))]",
    "eventhubName": "[format('eh{0}', parameters('applicationName'))]",
    "cosmosDbAccountName": "[format('{0}db', parameters('applicationName'))]",
    "cosmosDbName": "ReadingsDB",
    "cosmosContainerName": "Readings",
    "cosmosThroughput": 400,
    "functionAppName": "[format('{0}-fa', parameters('applicationName'))]",
    "functionRuntime": "dotnet"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', 'blobtriggercontainer')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', 'eventgridtriggercontainer')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-08-01",
      "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('storageSku')]"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[reference(resourceId('Microsoft.Resources/deployments', variables('appServicePlanName'))).outputs.appServicePlanId.value]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('appInsightsName'))).outputs.appInsightsInstrumentationKey.value]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[format('InstrumentationKey={0}', reference(resourceId('Microsoft.Resources/deployments', variables('appInsightsName'))).outputs.appInsightsInstrumentationKey.value)]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[variables('functionRuntime')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "DatabaseName",
              "value": "[variables('cosmosDbName')]"
            },
            {
              "name": "ContainerName",
              "value": "[variables('cosmosContainerName')]"
            },
            {
              "name": "CosmosDbEndpoint",
              "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))).documentEndpoint]"
            },
            {
              "name": "EventHubConnection__fullyQualifiedNamespace",
              "value": "[format('{0}.servicebus.windows.net', variables('eventhubName'))]"
            }
          ]
        },
        "httpsOnly": true
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', variables('cosmosDbAccountName'), variables('cosmosDbName'), variables('cosmosContainerName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDbAccountName'), variables('cosmosDbName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2021-10-15",
      "name": "[variables('cosmosDbAccountName')]",
      "location": "[parameters('location')]",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0,
            "isZoneRedundant": false
          }
        ],
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        }
      },
      "identity": {
        "type": "SystemAssigned"
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2021-10-15",
      "name": "[format('{0}/{1}', variables('cosmosDbAccountName'), variables('cosmosDbName'))]",
      "properties": {
        "resource": {
          "id": "[variables('cosmosDbName')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2021-10-15",
      "name": "[format('{0}/{1}/{2}', variables('cosmosDbAccountName'), variables('cosmosDbName'), variables('cosmosContainerName'))]",
      "properties": {
        "options": {
          "throughput": "[variables('cosmosThroughput')]"
        },
        "resource": {
          "id": "[variables('cosmosContainerName')]",
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          },
          "indexingPolicy": {
            "indexingMode": "consistent",
            "includedPaths": [
              {
                "path": "/*"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDbAccountName'), variables('cosmosDbName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('appInsightsName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appInsightsName": {
            "value": "[variables('appInsightsName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "6500562516559140540"
            }
          },
          "parameters": {
            "appInsightsName": {
              "type": "string",
              "metadata": {
                "description": "The name of the App Insights instnace that will be deployed."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location that the App Insights instance will be deployed to."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('appInsightsName')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            }
          ],
          "outputs": {
            "appInsightsInstrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName'))).InstrumentationKey]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('appServicePlanName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServicePlanName": {
            "value": "[variables('appServicePlanName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "7772195420277193592"
            }
          },
          "parameters": {
            "appServicePlanName": {
              "type": "string",
              "metadata": {
                "description": "The name of the App Service Plan that will be deployed."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location that the App Service Plan will be deployed to."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2021-03-01",
              "name": "[parameters('appServicePlanName')]",
              "location": "[parameters('location')]",
              "kind": "functionapp",
              "sku": {
                "name": "Y1"
              },
              "properties": {}
            }
          ],
          "outputs": {
            "appServicePlanId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('eventhubName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "eventhubNamespaceName": {
            "value": "[variables('eventhubName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "functionAppName": {
            "value": "[variables('functionAppName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "7431660503181197326"
            }
          },
          "parameters": {
            "eventhubNamespaceName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Event Hub Namespace."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location that the Event Hub namespace will be deployed to."
              }
            },
            "functionAppName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Function app that we will assign Data Receiver and Data Sender roles to."
              }
            }
          },
          "variables": {
            "eventHubsDataReceiverRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2b629674-e913-4c01-ae53-ef4638d8f975')]",
            "eventHubsDataSenderRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a638d3c7-ab3a-418d-83e6-5f17a39d4fde')]"
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces",
              "apiVersion": "2021-11-01",
              "name": "[parameters('eventhubNamespaceName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Basic",
                "tier": "Basic"
              },
              "identity": {
                "type": "SystemAssigned"
              }
            },
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}', parameters('eventhubNamespaceName'), 'readings')]",
              "properties": {
                "messageRetentionInDays": 1
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventhubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}/{2}', parameters('eventhubNamespaceName'), 'readings', 'ListenSend')]",
              "properties": {
                "rights": [
                  "Listen",
                  "Send"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventhubNamespaceName'), 'readings')]",
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventhubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.EventHub/namespaces/{0}/eventhubs/{1}', parameters('eventhubNamespaceName'), 'readings')]",
              "name": "[guid(resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventhubNamespaceName'), 'readings'), resourceId('Microsoft.Web/sites', parameters('functionAppName')), variables('eventHubsDataReceiverRoleId'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2021-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[variables('eventHubsDataReceiverRoleId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventhubNamespaceName'), 'readings')]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.EventHub/namespaces/{0}/eventhubs/{1}', parameters('eventhubNamespaceName'), 'readings')]",
              "name": "[guid(resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventhubNamespaceName'), 'readings'), resourceId('Microsoft.Web/sites', parameters('functionAppName')), variables('eventHubsDataSenderRoleId'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2021-03-01', 'full').identity.principalId]",
                "roleDefinitionId": "[variables('eventHubsDataSenderRoleId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventhubNamespaceName'), 'readings')]"
              ]
            }
          ],
          "outputs": {
            "eventHubNamespace": {
              "type": "string",
              "value": "[parameters('eventhubNamespaceName')]"
            },
            "eventHubName": {
              "type": "string",
              "value": "readings"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "sqlroles",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosDbAccountName": {
            "value": "[variables('cosmosDbAccountName')]"
          },
          "functionAppPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2021-03-01', 'full').identity.principalId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "8774753016840760487"
            }
          },
          "parameters": {
            "cosmosDbAccountName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Cosmos DB account that we will use for SQL Role Assignments"
              }
            },
            "functionAppPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The Principal Id of the Function App that we will grant the role assignment to."
              }
            }
          },
          "variables": {
            "roleDefinitionId": "[guid('sql-role-definition-', parameters('functionAppPrincipalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName')))]",
            "roleAssignmentId": "[guid(variables('roleDefinitionId'), parameters('functionAppPrincipalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName')))]",
            "roleDefinitionName": "Function Read Write Role",
            "dataActions": [
              "Microsoft.DocumentDB/databaseAccounts/readMetadata",
              "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/*"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
              "apiVersion": "2021-11-15-preview",
              "name": "[format('{0}/{1}', parameters('cosmosDbAccountName'), variables('roleDefinitionId'))]",
              "properties": {
                "roleName": "[variables('roleDefinitionName')]",
                "type": "CustomRole",
                "assignableScopes": [
                  "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]"
                ],
                "permissions": [
                  {
                    "dataActions": "[variables('dataActions')]"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2021-11-15-preview",
              "name": "[format('{0}/{1}', parameters('cosmosDbAccountName'), variables('roleAssignmentId'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', split(format('{0}/{1}', parameters('cosmosDbAccountName'), variables('roleDefinitionId')), '/')[0], split(format('{0}/{1}', parameters('cosmosDbAccountName'), variables('roleDefinitionId')), '/')[1])]",
                "principalId": "[parameters('functionAppPrincipalId')]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', split(format('{0}/{1}', parameters('cosmosDbAccountName'), variables('roleDefinitionId')), '/')[0], split(format('{0}/{1}', parameters('cosmosDbAccountName'), variables('roleDefinitionId')), '/')[1])]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDbAccountName'), variables('cosmosDbName'))]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ]
    }
  ]
}